(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{315:function(t,a,s){"use strict";s.r(a);var e=s(10),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" git常用命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 记录目前自己学到的一些git命令\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" git的所有挑选都是左开右闭\n 在每次commit或者push,cherry-pick,patch 之前都要先pull，保证本地与远端的一致性，也就说保证HEAD的一致性\n 避免冲突\n")])])]),a("h2",{attrs:{id:"查看日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看日志"}},[t._v("#")]),t._v(" 查看日志")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git log\n")])])]),a("h2",{attrs:{id:"命令退出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令退出"}},[t._v("#")]),t._v(" 命令退出")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("   控制台: 输入q\n")])])]),a("h2",{attrs:{id:"查看具体某次提交的修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看具体某次提交的修改"}},[t._v("#")]),t._v(" 查看具体某次提交的修改")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git show commitHash\n")])])]),a("h2",{attrs:{id:"查看具体提交范围-包含修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看具体提交范围-包含修改"}},[t._v("#")]),t._v(" 查看具体提交范围(包含修改)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git show commitHash1^..commitHash2\n")])])]),a("h2",{attrs:{id:"查看具体提交范围-不包含修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看具体提交范围-不包含修改"}},[t._v("#")]),t._v(" 查看具体提交范围(不包含修改)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git log commitHash1^..commitHash2\n")])])]),a("h2",{attrs:{id:"查看某个commitid到头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看某个commitid到头"}},[t._v("#")]),t._v(" 查看某个commitId到头")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git log commitHash..HEAD\n")])])]),a("h2",{attrs:{id:"查看当前分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看当前分支"}},[t._v("#")]),t._v(" 查看当前分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git branch\n")])])]),a("h2",{attrs:{id:"提交本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交本地"}},[t._v("#")]),t._v(" 提交本地")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    git add .\n    git commit -m "message"\n')])])]),a("h2",{attrs:{id:"修改远端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改远端"}},[t._v("#")]),t._v(" 修改远端")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git push origin dev\n")])])]),a("h2",{attrs:{id:"查看所有分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看所有分支"}},[t._v("#")]),t._v(" 查看所有分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git branch -a\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout 不仅仅可以切换分支，还可以进行回滚某个文件\ngit checkout  --  docs\\config\\git.md \ngit checkout  --  commitHash   fileName\n注意： 这个文件不能是commit的状态\n")])])]),a("h2",{attrs:{id:"切换分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[t._v("#")]),t._v(" 切换分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git checkout 分支名  不推荐\n    git switch 分支名  推荐\n    理由:  git checkout 不仅仅可以切换分支，还可以进行回滚某个文件\n    作为一个容易混淆的命令，不推荐在切换分支的时候使用\n")])])]),a("h2",{attrs:{id:"迁出远端分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迁出远端分支"}},[t._v("#")]),t._v(" 迁出远端分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git checkout -b 分支名 origin/分支名\n")])])]),a("h2",{attrs:{id:"创建本地分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建本地分支"}},[t._v("#")]),t._v(" 创建本地分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git branch 分支名\n")])])]),a("h2",{attrs:{id:"删除本地分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除本地分支"}},[t._v("#")]),t._v(" 删除本地分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git branch -d 分支名\n")])])]),a("h2",{attrs:{id:"删除远端分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除远端分支"}},[t._v("#")]),t._v(" 删除远端分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("   git push origin --delete   分支名\n")])])]),a("h2",{attrs:{id:"创建远端分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建远端分支"}},[t._v("#")]),t._v(" 创建远端分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git branch  dev   //创建本地分支\n    git push origin dev   //将本地分支推送到远端\n    git branch  --set-upstream-to=origin/dev  //将本地分支与远端分支关联\n    git branch  -a //查看所有分支\n")])])]),a("h2",{attrs:{id:"删除远端分支-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除远端分支-2"}},[t._v("#")]),t._v(" 删除远端分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git push origin --delete dev\n")])])]),a("h2",{attrs:{id:"缓存修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存修改"}},[t._v("#")]),t._v(" 缓存修改")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    git stash save "message"\n')])])]),a("h2",{attrs:{id:"查看缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看缓存"}},[t._v("#")]),t._v(" 查看缓存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git stash list\n")])])]),a("h2",{attrs:{id:"恢复缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#恢复缓存"}},[t._v("#")]),t._v(" 恢复缓存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git stash apply stash@{0} 这里是标号\n    git stash pop stash@{0}\n")])])]),a("h2",{attrs:{id:"删除缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除缓存"}},[t._v("#")]),t._v(" 删除缓存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git stash drop stash@{0}\n")])])]),a("h2",{attrs:{id:"清空缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清空缓存"}},[t._v("#")]),t._v(" 清空缓存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git stash clear\n")])])]),a("h2",{attrs:{id:"cherry-pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick"}},[t._v("#")]),t._v(" cherry-pick")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    git cherry-pick [<options>] <commit-ish>...\n        常用options:\n        --quit                退出当前的chery-pick序列\n        --continue            继续当前的chery-pick序列\n        --abort               取消当前的chery-pick序列，恢复当前分支\n        -n, --no-commit       不自动提交\n        -e, --edit            编辑提交信息\n        \n    git cherry-pick  -n  <commitHash> pick 一个\n    git cherry-pick  -n  commitHash^..commitHash  pick 多个包含左侧\n    git cherry-pick  -n  commitHash..commitHash   pick 多个不包含左侧\n")])])]),a("h2",{attrs:{id:"git-创建补丁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-创建补丁"}},[t._v("#")]),t._v(" git 创建补丁")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("注意：windows11 如果是用powerShell 创建补丁，会出现乱码，你必须打开git自己的可视化界面\n注意: 无论是cherry-pick还是git diff 在不写^的情况下都是左开右闭, 而且你必须保证分支的干净\n\n// 比较 master 分支与 dev 分支之间的差异，并将差异写入到 0001-master-dev.patch 文件中\ngit diff --no-prefix master..dev > 0001-master-dev.patch\n\n// 比较从 某个提交到某个提交中的所有差异，写入到master.patch\ngit  diff [commitId] [commitId] > master.patch\n// 检查是否可以进行应用\ngit apply --check master.patch\n// 应用\ngit apply master.patch\n\n")])])]),a("h2",{attrs:{id:"重置提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重置提交"}},[t._v("#")]),t._v(" 重置提交")]),t._v(" "),a("p",[a("span",[t._v(" 重置提交"),a("span",{staticStyle:{color:"red"}},[t._v("三")]),t._v("种模式")]),t._v(" "),a("ul",[a("li",[t._v("soft: 重置到本次位置,差异保存")]),t._v(" "),a("li",[t._v("mixed:重置到本次位置,差异保存,但是会影响变更状态记录")]),t._v(" "),a("li",[t._v("hard: 工作区的内容完全重置成本次commitHash的文件内容")])])]),t._v(" "),a("h2",{attrs:{id:"重置命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重置命令"}},[t._v("#")]),t._v(" 重置命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset [<mode>] [<commit>]\ngit rest --soft [<commit>]\ngit rest --mixed [<commit>]\ngit rest --hard [<commit>]\n")])])]),a("h2",{attrs:{id:"git-错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-错误"}},[t._v("#")]),t._v(" git 错误")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fatal: Unable to create 'E:/project/vuepress-starter/.git/index.lock': File exists.\nAnother git process seems to be running in this repository, e.g.\n")])])]),a("ul",[a("li",[t._v("你在其他地方打开了 Git 仓库的编辑器（如 Visual Studio Code）")]),t._v(" "),a("li",[t._v("你在命令行中运行了另一个 Git 命令，但尚未完成")]),t._v(" "),a("li",[t._v("你的计算机上有多个 Git 进程正在运行")])]),t._v(" "),a("h2",{attrs:{id:"git-回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-回滚"}},[t._v("#")]),t._v(" git 回滚")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  git rest --hard commitHash\n  git push origin HEAD --force\n  git revert commitHash\n  这两个命令都能让你回到代码库中之前的指定状态，但后果不同。\n  git rest --hard commitHash 会让你回到指定的状态，但是会丢弃掉你之前的提交记录，也就是说你之前的提交记录会被抹掉。\n  git revert commitHash 会让你回到指定的状态，但是会保留你之前的提交记录，也就是说你之前的提交记录不会被抹掉。\n")])])]),a("h2",{attrs:{id:"git-回滚远端代价"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-回滚远端代价"}},[t._v("#")]),t._v(" git 回滚远端代价")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  注意： 一定要考虑清楚   git rest 的代价，因为这个命令会抹掉你之前的提交记录，什么都没有了，删除就是删除了\n  git revert  不会因为上次提交的代码还存在,你完全还有机会，在提取出来  \n")])])]),a("h2",{attrs:{id:"回滚时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回滚时机"}},[t._v("#")]),t._v(" 回滚时机")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    revert的时候是当前条， 而reset的时候是之前的条\n")])])]),a("h2",{attrs:{id:"git-remote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-remote"}},[t._v("#")]),t._v(" git remote")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git remote 命令用于用于管理 Git 仓库中的远程仓库。\n\ngit remote 命令提供了一些用于查看、添加、重命名和删除远程仓库的功能\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git remote -v 查看远端仓库\norigin  https://github.com/Leadgq/vue-preess.git (fetch)  // fetch 代表拉取\norigin  https://github.com/Leadgq/vue-preess.git (push)   // push 代表推送\n本地创建的仓库是没有远端仓库的，所以这里是空的\ngit remote add origin    新增远端仓库\ngit remote rm origin     删除远端仓库  --\x3e 删除之后，你就不能推送到远端仓库了\ngit remote rename origin  <name>  重命名远端仓库\n你现在从别的仓库上clone了代码，那么推送的时候，人家做了保护，\n你就不能推送到别人的仓库上，你需要先删除远端仓库，然后再添加远端仓库、或者采用\ngit remote set-url origin  --\x3e 重新设置远端仓库\ngit remote remove origin  --\x3e 删除远端仓库\nrm 和 remove 是一样的\n")])])]),a("h2",{attrs:{id:"git中的head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git中的head"}},[t._v("#")]),t._v(" .git中的HEAD")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git中的HEAD指向的是当前所在的分支\n它记录分支的地方在.git HEAD文件中    ref: refs/heads/dev\n切换分支的时候 会改变HEAD的指向\n")])])]),a("h2",{attrs:{id:"git分支中的head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git分支中的head"}},[t._v("#")]),t._v(" .git分支中的HEAD")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("在.git配置文件夹中会存在一个 logs的文件夹，这个文件夹中会记录你的每一次操作\n每当你新建立一个分支 会在logs文件夹中生成一个文件  refs--\x3e heads---\x3e  dev\n上一次头部： 7f85239a70b4c766184f0233071e16d0e6a41ac3\n本次头部： 537920012bf4a09be0a86ce3020d116a1ec4db57\n作者： gaoqiang <gaoqiang@yundun119.com> 1694418648 +0800\t\ncommit的信息 commit: [git][新增][git log 从某个id开始到头]\n")])])]),a("h2",{attrs:{id:"git中的config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git中的config"}},[t._v("#")]),t._v(" .git中的config")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  你所有的配置都在这里面 包括远端仓库的地址，全部在这里\n")])])]),a("h2",{attrs:{id:"git中的index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git中的index"}},[t._v("#")]),t._v(" .git中的index")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  index文件是暂存区的索引文件，它记录了暂存区的文件信息，包括文件名、文件的状态（新增、修改、删除）和文件的SHA-1值。\n  当你执行git add命令时，Git就会根据index文件中的记录将文件内容添加到暂存区。\n  当你执行git commit命令时，Git就会根据index文件中的记录将暂存区的文件提交到本地仓库。\n  当你执行git reset命令时，Git就会根据index文件中的记录将暂存区的文件恢复到工作区。\n  当你执行git checkout命令时，Git就会根据index文件中的记录将工作区的文件恢复到暂存区。\n")])])]),a("h2",{attrs:{id:"拉取代码区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取代码区别"}},[t._v("#")]),t._v(" 拉取代码区别")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、功能不同\ngit pull 和 git pull --rebase 的区别\ngit pull = git fetch + git merge FETCH_HEAD；\ngit pull –rebase = git fetch + git rebase FETCH_HEAD。\n相当于git pull -rebase和git pull的不同转变为了git fetch和git merge的不同。\n\n2、效果不同\ngit pull：merge操作会生成一个新的节点，之前的提交分开显示；\n\ngit pull –rebase ：rebase操作不会生成新的节点，是将两个分支融合成一个线性的提交。\n\n如果你使用 --rebase 本地有未提交的代码是无法使用的，因为rebase会把本地的提交放到最后面，这样会导致冲突，所以在使用rebase之前一定要先提交本地的代码。\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);